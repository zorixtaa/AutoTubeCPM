import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import os
import json
import sys
import time

# Ajouter le r√©pertoire parent au chemin pour importer les modules du projet
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Importer les modules du projet
from scripts.niche_discovery import NicheDiscovery
from scripts.content_generation import ContentGenerator
from scripts.tts import TTSEngine
from scripts.video_production import VideoProducer
from scripts.youtube_publishing import YouTubeAuth, YouTubePublisher
from scripts.analytics import PerformanceAnalyzer

# Configuration de la page Streamlit
st.set_page_config(
    page_title="AutoTubeCPM - Tableau de bord",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Styles CSS personnalis√©s
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #FF0000;
        text-align: center;
        margin-bottom: 1rem;
        font-weight: bold;
    }
    .sub-header {
        font-size: 1.8rem;
        color: #333;
        margin-bottom: 1rem;
    }
    .card {
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        background-color: white;
        margin-bottom: 1rem;
    }
    .metric-card {
        text-align: center;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        background-color: white;
    }
    .metric-value {
        font-size: 2rem;
        font-weight: bold;
        color: #FF0000;
    }
    .metric-label {
        font-size: 1rem;
        color: #666;
    }
    .trend-up {
        color: green;
    }
    .trend-down {
        color: red;
    }
    .trend-stable {
        color: orange;
    }
    .sidebar-header {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }
    .stButton>button {
        width: 100%;
        background-color: #FF0000;
        color: white;
        font-weight: bold;
    }
    .stButton>button:hover {
        background-color: #CC0000;
    }
    .footer {
        text-align: center;
        margin-top: 2rem;
        color: #666;
        font-size: 0.8rem;
    }
</style>
""", unsafe_allow_html=True)

# Fonction pour initialiser les variables de session
def init_session_state():
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'youtube_auth' not in st.session_state:
        st.session_state.youtube_auth = None
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "dashboard"
    if 'niches' not in st.session_state:
        st.session_state.niches = []
    if 'generated_scripts' not in st.session_state:
        st.session_state.generated_scripts = []
    if 'generated_videos' not in st.session_state:
        st.session_state.generated_videos = []
    if 'uploaded_videos' not in st.session_state:
        st.session_state.uploaded_videos = []
    if 'performance_data' not in st.session_state:
        st.session_state.performance_data = {}

# Initialiser les variables de session
init_session_state()

# Fonction pour simuler l'authentification YouTube
def authenticate_youtube():
    st.session_state.authenticated = True
    st.session_state.youtube_auth = "authenticated"
    st.success("Authentification YouTube r√©ussie !")

# Fonction pour simuler la d√©connexion
def logout():
    st.session_state.authenticated = False
    st.session_state.youtube_auth = None
    st.success("D√©connexion r√©ussie !")

# Fonction pour charger les donn√©es simul√©es
def load_sample_data():
    # Simuler des donn√©es de niches
    niches = [
        {"category": "finance", "subcategory": "investing", "estimated_cpm": 18.5, "trend": "up"},
        {"category": "technology", "subcategory": "ai_machine_learning", "estimated_cpm": 15.0, "trend": "up"},
        {"category": "business", "subcategory": "entrepreneurship", "estimated_cpm": 14.5, "trend": "stable"},
        {"category": "finance", "subcategory": "cryptocurrency", "estimated_cpm": 20.0, "trend": "down"},
        {"category": "technology", "subcategory": "gadget_reviews", "estimated_cpm": 14.0, "trend": "up"}
    ]
    
    # Simuler des scripts g√©n√©r√©s
    scripts = [
        {"title": "10 Strat√©gies d'Investissement pour 2025", "category": "finance", "subcategory": "investing", "date": "2025-03-20", "status": "completed"},
        {"title": "Comment l'IA Transforme le Marketing Digital", "category": "technology", "subcategory": "ai_machine_learning", "date": "2025-03-18", "status": "completed"},
        {"title": "Guide Complet du Bitcoin pour D√©butants", "category": "finance", "subcategory": "cryptocurrency", "date": "2025-03-15", "status": "completed"},
        {"title": "Les Meilleurs Outils SaaS pour Entrepreneurs", "category": "business", "subcategory": "entrepreneurship", "date": "2025-03-10", "status": "completed"}
    ]
    
    # Simuler des vid√©os g√©n√©r√©es
    videos = [
        {"title": "10 Strat√©gies d'Investissement pour 2025", "duration": "12:45", "date": "2025-03-21", "status": "uploaded", "views": 1250, "revenue": 22.5},
        {"title": "Comment l'IA Transforme le Marketing Digital", "duration": "15:30", "date": "2025-03-19", "status": "uploaded", "views": 980, "revenue": 14.7},
        {"title": "Guide Complet du Bitcoin pour D√©butants", "duration": "18:20", "date": "2025-03-16", "status": "ready", "views": 0, "revenue": 0},
        {"title": "Les Meilleurs Outils SaaS pour Entrepreneurs", "duration": "10:15", "date": "2025-03-11", "status": "processing", "views": 0, "revenue": 0}
    ]
    
    # Simuler des donn√©es de performance
    performance = {
        "views": {
            "current": 2230,
            "previous": 1850,
            "change_pct": 20.5,
            "trend": "up"
        },
        "revenue": {
            "current": 37.2,
            "previous": 28.5,
            "change_pct": 30.5,
            "trend": "up"
        },
        "subscribers": {
            "current": 125,
            "previous": 95,
            "change_pct": 31.6,
            "trend": "up"
        },
        "cpm": {
            "current": 16.8,
            "previous": 15.4,
            "change_pct": 9.1,
            "trend": "up"
        },
        "daily_views": [120, 135, 110, 145, 160, 175, 190, 210, 195, 220, 240, 250, 280],
        "daily_revenue": [1.8, 2.0, 1.7, 2.2, 2.4, 2.6, 2.9, 3.2, 3.0, 3.3, 3.6, 3.8, 4.2],
        "category_cpm": {
            "categories": ["Finance", "Technologie", "Business", "Sant√©", "√âducation"],
            "values": [18.5, 15.0, 14.5, 11.0, 10.0]
        }
    }
    
    return niches, scripts, videos, performance

# Charger les donn√©es simul√©es
niches, scripts, videos, performance = load_sample_data()
st.session_state.niches = niches
st.session_state.generated_scripts = scripts
st.session_state.generated_videos = videos
st.session_state.performance_data = performance

# Barre lat√©rale
with st.sidebar:
    st.markdown('<div class="sidebar-header">üé¨ AutoTubeCPM</div>', unsafe_allow_html=True)
    
    # Section d'authentification
    if not st.session_state.authenticated:
        st.markdown("### Connexion YouTube")
        st.button("Se connecter avec Google", on_click=authenticate_youtube)
    else:
        st.markdown("### Compte YouTube")
        st.success("Connect√©")
        st.button("Se d√©connecter", on_click=logout)
    
    st.markdown("---")
    
    # Navigation
    st.markdown("### Navigation")
    if st.button("üìä Tableau de bord"):
        st.session_state.current_page = "dashboard"
    if st.button("üîç D√©couverte de niches"):
        st.session_state.current_page = "niches"
    if st.button("üìù G√©n√©ration de contenu"):
        st.session_state.current_page = "content"
    if st.button("üé• Production vid√©o"):
        st.session_state.current_page = "production"
    if st.button("üìà Analyse de performance"):
        st.session_state.current_page = "analytics"
    if st.button("‚öôÔ∏è Param√®tres"):
        st.session_state.current_page = "settings"
    
    st.markdown("---")
    
    # Informations syst√®me
    st.markdown("### Informations syst√®me")
    st.info(f"Derni√®re mise √† jour: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    
    # Pied de page
    st.markdown('<div class="footer">AutoTubeCPM v1.0<br>Powered by Manus AI</div>', unsafe_allow_html=True)

# Contenu principal
if st.session_state.current_page == "dashboard":
    # En-t√™te
    st.markdown('<div class="main-header">üìä Tableau de bord</div>', unsafe_allow_html=True)
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.markdown(f'<div class="metric-value">{performance["views"]["current"]}</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="metric-label">Vues <span class="trend-{performance["views"]["trend"]}">({performance["views"]["change_pct"]:+.1f}%)</span></div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.markdown(f'<div class="metric-value">${performance["revenue"]["current"]}</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="metric-label">Revenus <span class="trend-{performance["revenue"]["trend"]}">({performance["revenue"]["change_pct"]:+.1f}%)</span></div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.markdown(f'<div class="metric-value">{performance["subscribers"]["current"]}</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="metric-label">Abonn√©s <span class="trend-{performance["subscribers"]["trend"]}">({performance["subscribers"]["change_pct"]:+.1f}%)</span></div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col4:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.markdown(f'<div class="metric-value">${performance["cpm"]["current"]}</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="metric-label">CPM moyen <span class="trend-{performance["cpm"]["trend"]}">({performance["cpm"]["change_pct"]:+.1f}%)</span></div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Graphiques de performance
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown('<div class="sub-header">Vues quotidiennes</div>', unsafe_allow_html=True)
        
        # Cr√©er des dates pour les 14 derniers jours
        dates = [(datetime.now() - timedelta(days=i)).strftime('%d/%m') for i in range(13, 0, -1)]
        
        # Cr√©er un DataFrame pour le graphique
        df_views = pd.DataFrame({
            'Date': dates,
            'Vues': performance['daily_views']
        })
        
        # Cr√©er le graphique avec Plotly
        fig_views = px.line(df_views, x='Date', y='Vues', markers=True)
        fig_views.update_layout(
            height=300,
            margin=dict(l=20, r=20, t=20, b=20),
            xaxis_title="",
            yaxis_title="",
            hovermode="x unified"
        )
        st.plotly_chart(fig_views, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown('<div class="sub-header">Revenus quotidiens</div>', unsafe_allow_html=True)
        
        # Cr√©er un DataFrame pour le graphique
        df_revenue = pd.DataFrame({
            'Date': dates,
            'Revenus': performance['daily_revenue']
        })
        
        # Cr√©er le graphique avec Plotly
        fig_revenue = px.bar(df_revenue, x='Date', y='Revenus')
        fig_revenue.update_layout(
            height=300,
            margin=dict(l=20, r=20, t=20, b=20),
            xaxis_title="",
            yaxis_title="",
            hovermode="x unified"
        )
        fig_revenue.update_traces(marker_color='#FF0000')
        st.plotly_chart(fig_revenue, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Vid√©os r√©centes et niches √† fort CPM
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown('<div class="sub-header">Vid√©os r√©centes</div>', unsafe_allow_html=True)
        
        # Cr√©er un DataFrame pour les vid√©os
        df_videos = pd.DataFrame(videos)
        
        # Filtrer les vid√©os t√©l√©charg√©es
        df_uploaded = df_videos[df_videos['status'] == 'uploaded'].sort_values('date', ascending=False)
        
        if not df_uploaded.empty:
            # Afficher le tableau
            st.dataframe(
                df_uploaded[['title', 'date', 'views', 'revenue']],
                column_config={
                    'title': 'Titre',
                    'date': 'Date',
                    'views': 'Vues',
                    'revenue': st.column_config.NumberColumn('Revenus ($)', format="$%.2f")
                },
                hide_index=True,
                use_container_width=True
            )
        else:
            st.info("Aucune vid√©o t√©l√©charg√©e pour le moment.")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown('<div class="sub-header">CPM par cat√©gorie</div>', unsafe_allow_html=True)
        
        # Cr√©er un DataFrame pour le graphique
        df_cpm = pd.DataFrame({
            'Cat√©gorie': performance['category_cpm']['categories'],
            'CPM': performance['category_cpm']['values']
        })
        
        # Cr√©er le graphique avec Plotly
        fig_cpm = px.bar(df_cpm, x='Cat√©gorie', y='CPM', text_auto='.2f')
        fig_cpm.update_layout(
            height=300,
            margin=dict(l=20, r=20, t=20, b=20),
            xaxis_title="",
            yaxis_title="CPM ($)",
            hovermode="x unified"
        )
        fig_cpm.update_traces(marker_color='#4CAF50', texttemplate='$%{text}', textposition='outside')
        st.plotly_chart(fig_cpm, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Actions rapides
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Actions rapides</div>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üîç D√©couvrir des niches", key="quick_niches"):
            st.session_state.current_page = "niches"
    
    with col2:
        if st.button("üìù G√©n√©rer un script", key="quick_script"):
            st.session_state.current_page = "content"
    
    with col3:
        if st.button("üé• Produire une vid√©o", key="quick_video"):
            st.session_state.current_page = "production"
    
    with col4:
        if st.button("üìä Voir les analyses", key="quick_analytics"):
            st.session_state.current_page = "analytics"
    
    st.markdown('</div>', unsafe_allow_html=True)

elif st.session_state.current_page == "niches":
    # En-t√™te
    st.markdown('<div class="main-header">üîç D√©couverte de niches</div>', unsafe_allow_html=True)
    
    # Param√®tres de recherche
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Param√®tres de recherche</div>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        region = st.selectbox("R√©gion", ["√âtats-Unis", "Canada", "Royaume-Uni", "Australie", "Global"], index=0)
    
    with col2:
        min_cpm = st.slider("CPM minimum ($)", 5.0, 25.0, 10.0, 0.5)
    
    with col3:
        categories = st.multiselect("Cat√©gories", ["Finance", "Technologie", "Business", "Sant√©", "√âducation"], default=["Finance", "Technologie", "Business"])
    
    if st.button("Rechercher des niches √† fort CPM", key="search_niches"):
        with st.spinner("Recherche des niches en cours..."):
            time.sleep(2)  # Simuler un d√©lai de recherche
            st.success("Recherche termin√©e ! 5 niches √† fort CPM trouv√©es.")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # R√©sultats de la recherche
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Niches √† fort CPM</div>', unsafe_allow_html=True)
    
    # Cr√©er un DataFrame pour les niches
    df_niches = pd.DataFrame(niches)
    
    # Afficher le tableau
    st.dataframe(
        df_niches,
        column_config={
            'category': st.column_config.TextColumn('Cat√©gorie'),
            'subcategory': st.column_config.TextColumn('Sous-cat√©gorie'),
            'estimated_cpm': st.column_config.NumberColumn('CPM estim√© ($)', format="$%.2f"),
            'trend': st.column_config.TextColumn('Tendance')
        },
        hide_index=True,
        use_container_width=True
    )
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Graphique des CPM par cat√©gorie
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">CPM par cat√©gorie</div>', unsafe_allow_html=True)
    
    # Agr√©ger les donn√©es par cat√©gorie
    df_category_cpm = df_niches.groupby('category')['estimated_cpm'].mean().reset_index()
    
    # Cr√©er le graphique avec Plotly
    fig_category_cpm = px.bar(df_category_cpm, x='category', y='estimated_cpm', text_auto='.2f')
    fig_category_cpm.update_layout(
        height=400,
        margin=dict(l=20, r=20, t=20, b=20),
        xaxis_title="Cat√©gorie",
        yaxis_title="CPM moyen ($)",
        hovermode="x unified"
    )
    fig_category_cpm.update_traces(marker_color='#4CAF50', texttemplate='$%{text}', textposition='outside')
    st.plotly_chart(fig_category_cpm, use_container_width=True)
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Id√©es de contenu
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Id√©es de contenu</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        selected_category = st.selectbox("Cat√©gorie", ["Finance", "Technologie", "Business", "Sant√©", "√âducation"], key="idea_category")
    
    with col2:
        selected_subcategory = st.selectbox("Sous-cat√©gorie", ["Investissement", "Crypto-monnaie", "IA & Machine Learning", "Gadgets", "Entrepreneuriat"], key="idea_subcategory")
    
    if st.button("G√©n√©rer des id√©es de contenu", key="generate_ideas"):
        with st.spinner("G√©n√©ration d'id√©es en cours..."):
            time.sleep(2)  # Simuler un d√©lai de g√©n√©ration
            
            # Id√©es simul√©es par cat√©gorie
            ideas = {
                "Finance": [
                    "10 Strat√©gies d'Investissement pour 2025",
                    "Comment Construire un Portefeuille d'Actions R√©sistant aux Crises",
                    "Guide Complet du Bitcoin pour D√©butants",
                    "Les Erreurs √† √âviter en Investissement Immobilier",
                    "Comment √âconomiser $10,000 en Un An"
                ],
                "Technologie": [
                    "Comment l'IA Transforme le Marketing Digital",
                    "Revue Compl√®te des Derniers Smartphones Haut de Gamme",
                    "Guide du D√©veloppement Web pour D√©butants",
                    "Les Technologies √âmergentes qui Vont Changer Notre Futur",
                    "Comment Prot√©ger Votre Vie Priv√©e en Ligne"
                ],
                "Business": [
                    "Les Meilleurs Outils SaaS pour Entrepreneurs",
                    "Comment Lancer une Entreprise avec Moins de $1000",
                    "Strat√©gies de Marketing Digital pour PME",
                    "Comment Automatiser Votre Business en 2025",
                    "Les Secrets du E-commerce Rentable"
                ]
            }
            
            # Afficher les id√©es pour la cat√©gorie s√©lectionn√©e
            if selected_category in ideas:
                for idea in ideas[selected_category]:
                    st.write(f"‚Ä¢ {idea}")
            else:
                st.write("Aucune id√©e disponible pour cette cat√©gorie.")
    
    st.markdown('</div>', unsafe_allow_html=True)

elif st.session_state.current_page == "content":
    # En-t√™te
    st.markdown('<div class="main-header">üìù G√©n√©ration de contenu</div>', unsafe_allow_html=True)
    
    # Param√®tres de g√©n√©ration
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Param√®tres de g√©n√©ration</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        topic = st.text_input("Sujet de la vid√©o", "Strat√©gies d'investissement pour 2025")
        category = st.selectbox("Cat√©gorie", ["Finance", "Technologie", "Business", "Sant√©", "√âducation"], index=0)
    
    with col2:
        subcategory = st.selectbox("Sous-cat√©gorie", ["Investissement", "Crypto-monnaie", "Bourse", "√âpargne", "Immobilier"], index=0)
        target_audience = st.selectbox("Public cible", ["D√©butants", "Interm√©diaires", "Experts", "G√©n√©ral"], index=0)
    
    if st.button("G√©n√©rer un script", key="generate_script"):
        with st.spinner("G√©n√©ration du script en cours..."):
            time.sleep(3)  # Simuler un d√©lai de g√©n√©ration
            st.success("Script g√©n√©r√© avec succ√®s !")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Scripts g√©n√©r√©s
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Scripts g√©n√©r√©s</div>', unsafe_allow_html=True)
    
    # Cr√©er un DataFrame pour les scripts
    df_scripts = pd.DataFrame(scripts)
    
    # Afficher le tableau
    st.dataframe(
        df_scripts,
        column_config={
            'title': st.column_config.TextColumn('Titre'),
            'category': st.column_config.TextColumn('Cat√©gorie'),
            'subcategory': st.column_config.TextColumn('Sous-cat√©gorie'),
            'date': st.column_config.DateColumn('Date de g√©n√©ration'),
            'status': st.column_config.TextColumn('Statut')
        },
        hide_index=True,
        use_container_width=True
    )
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Aper√ßu du script
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Aper√ßu du script</div>', unsafe_allow_html=True)
    
    selected_script = st.selectbox("S√©lectionner un script", [script['title'] for script in scripts])
    
    # Contenu simul√© du script
    script_content = """
    # 10 Strat√©gies d'Investissement pour 2025

    ## Introduction
    - Hook: Saviez-vous que 80% des investisseurs manquent des opportunit√©s majeures en 2025 ? Aujourd'hui, je vais vous montrer comment faire partie des 20% qui r√©ussissent.
    - Introduction du sujet: Les strat√©gies d'investissement ont consid√©rablement √©volu√© ces derni√®res ann√©es. Que vous soyez d√©butant ou exp√©riment√©, comprendre les nouvelles approches est crucial.
    - Ce que le spectateur va apprendre: Dans cette vid√©o, vous d√©couvrirez 10 strat√©gies d'investissement efficaces pour 2025, les erreurs courantes √† √©viter, et des conseils pratiques √† appliquer imm√©diatement.

    ## Section 1: Les fondamentaux de l'investissement en 2025
    - Point principal 1: L'importance de la diversification dans un march√© volatil
    - Point principal 2: Comment √©valuer correctement le rapport risque/rendement
    - Exemple: Un portefeuille diversifi√© entre actions, obligations et actifs alternatifs a surperform√© de 15% les portefeuilles traditionnels en 2024.

    ## Section 2: Strat√©gies √©mergentes √† fort potentiel
    - Point principal 1: L'investissement th√©matique ciblant l'IA et les √©nergies renouvelables
    - Point principal 2: Les opportunit√©s dans les march√©s √©mergents post-pand√©mie
    - Exemple: Les ETF sp√©cialis√©s en IA ont g√©n√©r√© un rendement moyen de 22% l'ann√©e derni√®re, contre 8% pour les indices g√©n√©raux.

    ## Section 3: Optimisation fiscale et planification √† long terme
    - Point principal 1: Strat√©gies de r√©duction d'imp√¥ts l√©gales pour investisseurs
    - Point principal 2: L'importance de la planification de retraite d√®s maintenant
    - Exemple: En utilisant correctement les comptes d'√©pargne-retraite, un investisseur peut √©conomiser jusqu'√† 40% en imp√¥ts sur ses gains.

    ## Conclusion
    - R√©capitulation: Nous avons couvert 10 strat√©gies essentielles pour optimiser vos investissements en 2025, de la diversification aux approches th√©matiques et √† la planification fiscale.
    - Appel √† l'action: Si vous avez trouv√© cette vid√©o utile, n'h√©sitez pas √† liker et vous abonner pour plus de contenu sur l'investissement intelligent.
    - Question pour engagement: Quelle strat√©gie d'investissement vous a donn√© les meilleurs r√©sultats jusqu'√† pr√©sent ? Partagez votre exp√©rience dans les commentaires.
    """
    
    st.text_area("Contenu du script", script_content, height=400)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("Modifier le script", key="edit_script"):
            st.info("Fonctionnalit√© de modification en d√©veloppement.")
    
    with col2:
        if st.button("G√©n√©rer l'audio", key="generate_audio"):
            with st.spinner("G√©n√©ration de l'audio en cours..."):
                time.sleep(2)  # Simuler un d√©lai de g√©n√©ration
                st.success("Audio g√©n√©r√© avec succ√®s !")
    
    with col3:
        if st.button("Cr√©er une vid√©o", key="create_video"):
            st.session_state.current_page = "production"
    
    st.markdown('</div>', unsafe_allow_html=True)

elif st.session_state.current_page == "production":
    # En-t√™te
    st.markdown('<div class="main-header">üé• Production vid√©o</div>', unsafe_allow_html=True)
    
    # Param√®tres de production
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Param√®tres de production</div>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        selected_script = st.selectbox("Script", [script['title'] for script in scripts])
        visual_style = st.selectbox("Style visuel", ["Dynamique", "Diaporama d'images", "Vid√©o stock"], index=0)
    
    with col2:
        voice = st.selectbox("Voix", ["Homme professionnel", "Femme professionnelle", "Homme d√©contract√©", "Femme d√©contract√©e"], index=0)
        resolution = st.selectbox("R√©solution", ["1080p (Full HD)", "720p (HD)", "480p (SD)"], index=0)
    
    with col3:
        use_intro = st.checkbox("Utiliser une intro", value=True)
        use_outro = st.checkbox("Utiliser une outro", value=True)
        add_captions = st.checkbox("Ajouter des sous-titres", value=True)
    
    if st.button("Produire la vid√©o", key="produce_video"):
        with st.spinner("Production de la vid√©o en cours..."):
            time.sleep(4)  # Simuler un d√©lai de production
            st.success("Vid√©o produite avec succ√®s !")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Vid√©os produites
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Vid√©os produites</div>', unsafe_allow_html=True)
    
    # Cr√©er un DataFrame pour les vid√©os
    df_videos = pd.DataFrame(videos)
    
    # Afficher le tableau
    st.dataframe(
        df_videos,
        column_config={
            'title': st.column_config.TextColumn('Titre'),
            'duration': st.column_config.TextColumn('Dur√©e'),
            'date': st.column_config.DateColumn('Date de production'),
            'status': st.column_config.TextColumn('Statut'),
            'views': st.column_config.NumberColumn('Vues'),
            'revenue': st.column_config.NumberColumn('Revenus ($)', format="$%.2f")
        },
        hide_index=True,
        use_container_width=True
    )
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Aper√ßu et t√©l√©chargement
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Aper√ßu et t√©l√©chargement</div>', unsafe_allow_html=True)
    
    selected_video = st.selectbox("S√©lectionner une vid√©o", [video['title'] for video in videos])
    
    # Simuler un aper√ßu vid√©o
    st.image("https://via.placeholder.com/800x450.png?text=Aper√ßu+Vid√©o", use_column_width=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("T√©l√©charger sur YouTube", key="upload_youtube"):
            if st.session_state.authenticated:
                with st.spinner("T√©l√©chargement sur YouTube en cours..."):
                    time.sleep(3)  # Simuler un d√©lai de t√©l√©chargement
                    st.success("Vid√©o t√©l√©charg√©e avec succ√®s sur YouTube !")
            else:
                st.warning("Veuillez vous connecter √† YouTube pour t√©l√©charger la vid√©o.")
    
    with col2:
        if st.button("T√©l√©charger la vid√©o", key="download_video"):
            st.info("T√©l√©chargement de la vid√©o...")
    
    with col3:
        if st.button("Modifier les m√©tadonn√©es", key="edit_metadata"):
            st.info("Fonctionnalit√© de modification des m√©tadonn√©es en d√©veloppement.")
    
    st.markdown('</div>', unsafe_allow_html=True)

elif st.session_state.current_page == "analytics":
    # En-t√™te
    st.markdown('<div class="main-header">üìà Analyse de performance</div>', unsafe_allow_html=True)
    
    # Param√®tres d'analyse
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Param√®tres d'analyse</div>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        period = st.selectbox("P√©riode", ["7 derniers jours", "30 derniers jours", "3 derniers mois", "Ann√©e en cours"], index=1)
    
    with col2:
        metrics = st.multiselect("M√©triques", ["Vues", "Revenus", "CPM", "Abonn√©s", "Temps de visionnage", "Taux d'engagement"], 
                                default=["Vues", "Revenus", "CPM"])
    
    with col3:
        comparison = st.checkbox("Comparer avec la p√©riode pr√©c√©dente", value=True)
    
    if st.button("G√©n√©rer le rapport", key="generate_report"):
        with st.spinner("G√©n√©ration du rapport en cours..."):
            time.sleep(2)  # Simuler un d√©lai de g√©n√©ration
            st.success("Rapport g√©n√©r√© avec succ√®s !")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # M√©triques de performance
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">M√©triques de performance</div>', unsafe_allow_html=True)
    
    # Cr√©er des dates pour les 30 derniers jours
    dates = [(datetime.now() - timedelta(days=i)).strftime('%d/%m') for i in range(30, 0, -1)]
    
    # Simuler des donn√©es de performance
    np.random.seed(42)
    views = np.cumsum(np.random.randint(50, 200, size=30))
    revenue = np.cumsum(np.random.uniform(0.5, 3.0, size=30))
    cpm = 15 + np.random.normal(0, 1, size=30)
    
    # Cr√©er un DataFrame pour le graphique
    df_performance = pd.DataFrame({
        'Date': dates,
        'Vues': views,
        'Revenus': revenue,
        'CPM': cpm
    })
    
    # Cr√©er des onglets pour les diff√©rentes m√©triques
    tab1, tab2, tab3 = st.tabs(["Vues", "Revenus", "CPM"])
    
    with tab1:
        fig_views = px.line(df_performance, x='Date', y='Vues', markers=True)
        fig_views.update_layout(
            height=400,
            margin=dict(l=20, r=20, t=20, b=20),
            xaxis_title="",
            yaxis_title="Vues",
            hovermode="x unified"
        )
        st.plotly_chart(fig_views, use_container_width=True)
    
    with tab2:
        fig_revenue = px.line(df_performance, x='Date', y='Revenus', markers=True)
        fig_revenue.update_layout(
            height=400,
            margin=dict(l=20, r=20, t=20, b=20),
            xaxis_title="",
            yaxis_title="Revenus ($)",
            hovermode="x unified"
        )
        st.plotly_chart(fig_revenue, use_container_width=True)
    
    with tab3:
        fig_cpm = px.line(df_performance, x='Date', y='CPM', markers=True)
        fig_cpm.update_layout(
            height=400,
            margin=dict(l=20, r=20, t=20, b=20),
            xaxis_title="",
            yaxis_title="CPM ($)",
            hovermode="x unified"
        )
        st.plotly_chart(fig_cpm, use_container_width=True)
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Performance par vid√©o
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Performance par vid√©o</div>', unsafe_allow_html=True)
    
    # Filtrer les vid√©os t√©l√©charg√©es
    uploaded_videos = [v for v in videos if v['status'] == 'uploaded']
    
    if uploaded_videos:
        # Cr√©er un DataFrame pour les vid√©os
        df_uploaded = pd.DataFrame(uploaded_videos)
        
        # Cr√©er un graphique √† barres pour les vues
        fig_video_views = px.bar(df_uploaded, x='title', y='views', text_auto=True)
        fig_video_views.update_layout(
            height=400,
            margin=dict(l=20, r=20, t=20, b=20),
            xaxis_title="",
            yaxis_title="Vues",
            hovermode="x unified"
        )
        st.plotly_chart(fig_video_views, use_container_width=True)
        
        # Cr√©er un graphique √† barres pour les revenus
        fig_video_revenue = px.bar(df_uploaded, x='title', y='revenue', text_auto='.2f')
        fig_video_revenue.update_layout(
            height=400,
            margin=dict(l=20, r=20, t=20, b=20),
            xaxis_title="",
            yaxis_title="Revenus ($)",
            hovermode="x unified"
        )
        fig_video_revenue.update_traces(marker_color='#FF0000', texttemplate='$%{text}', textposition='outside')
        st.plotly_chart(fig_video_revenue, use_container_width=True)
    else:
        st.info("Aucune vid√©o t√©l√©charg√©e pour le moment.")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Analyse des tendances
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Analyse des tendances</div>', unsafe_allow_html=True)
    
    # Simuler des donn√©es de tendances
    trend_data = {
        'Cat√©gorie': ['Finance', 'Technologie', 'Business', 'Sant√©', '√âducation'],
        'CPM Actuel': [18.5, 15.0, 14.5, 11.0, 10.0],
        'CPM Pr√©c√©dent': [17.0, 14.2, 14.0, 10.5, 9.8],
        'Variation (%)': [8.8, 5.6, 3.6, 4.8, 2.0]
    }
    
    df_trends = pd.DataFrame(trend_data)
    
    # Cr√©er un graphique de comparaison
    fig_trends = go.Figure()
    
    fig_trends.add_trace(go.Bar(
        x=df_trends['Cat√©gorie'],
        y=df_trends['CPM Actuel'],
        name='CPM Actuel',
        marker_color='#4CAF50'
    ))
    
    fig_trends.add_trace(go.Bar(
        x=df_trends['Cat√©gorie'],
        y=df_trends['CPM Pr√©c√©dent'],
        name='CPM Pr√©c√©dent',
        marker_color='#2196F3'
    ))
    
    fig_trends.update_layout(
        height=400,
        margin=dict(l=20, r=20, t=20, b=20),
        xaxis_title="",
        yaxis_title="CPM ($)",
        hovermode="x unified",
        barmode='group'
    )
    
    st.plotly_chart(fig_trends, use_container_width=True)
    
    # Afficher le tableau de variation
    st.dataframe(
        df_trends,
        column_config={
            'Cat√©gorie': st.column_config.TextColumn('Cat√©gorie'),
            'CPM Actuel': st.column_config.NumberColumn('CPM Actuel ($)', format="$%.2f"),
            'CPM Pr√©c√©dent': st.column_config.NumberColumn('CPM Pr√©c√©dent ($)', format="$%.2f"),
            'Variation (%)': st.column_config.NumberColumn('Variation (%)', format="%.1f%%")
        },
        hide_index=True,
        use_container_width=True
    )
    
    st.markdown('</div>', unsafe_allow_html=True)

elif st.session_state.current_page == "settings":
    # En-t√™te
    st.markdown('<div class="main-header">‚öôÔ∏è Param√®tres</div>', unsafe_allow_html=True)
    
    # Param√®tres du compte
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Param√®tres du compte</div>', unsafe_allow_html=True)
    
    if st.session_state.authenticated:
        st.success("Connect√© √† YouTube")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.text_input("Nom de la cha√Æne", "Ma Cha√Æne AutoTubeCPM", disabled=True)
        
        with col2:
            st.text_input("ID de la cha√Æne", "UC1234567890abcdef", disabled=True)
        
        if st.button("D√©connecter le compte", key="disconnect_account"):
            st.session_state.authenticated = False
            st.session_state.youtube_auth = None
            st.success("D√©connexion r√©ussie !")
            st.rerun()
    else:
        st.warning("Non connect√© √† YouTube")
        
        if st.button("Se connecter avec Google", key="connect_account"):
            authenticate_youtube()
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Param√®tres de g√©n√©ration de contenu
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Param√®tres de g√©n√©ration de contenu</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.selectbox("Mod√®le de g√©n√©ration de script", ["Manus AI Standard", "Manus AI Premium", "Manus AI Pro"], index=0)
        st.selectbox("Moteur TTS", ["Kokoro TTS", "Tortoise TTS", "Coqui TTS"], index=0)
    
    with col2:
        st.selectbox("Source des visuels", ["Pexels API", "Stable Diffusion", "Mixte"], index=0)
        st.selectbox("Qualit√© vid√©o par d√©faut", ["1080p (Full HD)", "720p (HD)", "480p (SD)"], index=0)
    
    st.slider("Longueur de script cible (minutes)", 5, 30, 10)
    
    if st.button("Enregistrer les param√®tres", key="save_content_settings"):
        st.success("Param√®tres de g√©n√©ration de contenu enregistr√©s !")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Param√®tres de t√©l√©chargement
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Param√®tres de t√©l√©chargement</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.checkbox("T√©l√©chargement automatique", value=False)
        st.checkbox("Notification par email apr√®s t√©l√©chargement", value=True)
    
    with col2:
        st.selectbox("Visibilit√© par d√©faut", ["Public", "Non r√©pertori√©", "Priv√©"], index=0)
        st.checkbox("Activer les commentaires", value=True)
    
    st.text_area("Texte de description par d√©faut", "N'oubliez pas de liker et de vous abonner pour plus de contenu !\n\nSuivez-nous sur les r√©seaux sociaux :\nTwitter: @AutoTubeCPM\nInstagram: @AutoTubeCPM")
    
    if st.button("Enregistrer les param√®tres", key="save_upload_settings"):
        st.success("Param√®tres de t√©l√©chargement enregistr√©s !")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Param√®tres syst√®me
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Param√®tres syst√®me</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.selectbox("Th√®me", ["Clair", "Sombre", "Syst√®me"], index=0)
        st.selectbox("Langue", ["Fran√ßais", "English", "Espa√±ol", "Deutsch"], index=0)
    
    with col2:
        st.checkbox("Activer les notifications", value=True)
        st.checkbox("Mode d√©veloppeur", value=False)
    
    if st.button("R√©initialiser tous les param√®tres", key="reset_settings"):
        st.warning("√ätes-vous s√ªr de vouloir r√©initialiser tous les param√®tres ?")
        if st.button("Confirmer la r√©initialisation", key="confirm_reset"):
            st.success("Tous les param√®tres ont √©t√© r√©initialis√©s !")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # √Ä propos
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">√Ä propos</div>', unsafe_allow_html=True)
    
    st.markdown("""
    **AutoTubeCPM v1.0**
    
    Un syst√®me automatis√© de cr√©ation de contenu YouTube optimis√© pour le CPM, propuls√© par Manus AI.
    
    ¬© 2025 AutoTubeCPM - Tous droits r√©serv√©s
    
    [Documentation](https://github.com/username/AutoTubeCPM) | [Signaler un bug](https://github.com/username/AutoTubeCPM/issues)
    """)
    
    st.markdown('</div>', unsafe_allow_html=True)
